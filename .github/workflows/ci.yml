name: CI/CD - AgoraElectoral Monorepo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout del Repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for Turborepo to detect changes

      - name: 2. Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: 3. Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 4. Instalar Dependencias Globales (Poetry)
        run: pip install poetry

      - name: 5. Instalar Dependencias del Monorepo (npm)
        run: npm install

      - name: 6. Instalar Dependencias de Poetry para todos los servicios
        run: |
          for dir in services/*; do
            if [ -f "$dir/pyproject.toml" ]; then
              echo "Installing poetry dependencies for $dir"
              poetry install --no-root --directory "$dir"
            fi
          done

      - name: 7. Linting de Código
        run: npm run lint

      - name: 8. Ejecutar Pruebas
        run: npm run test

      - name: 9. Construir la Aplicación Frontend
        run: npm run build --workspace=frontend
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: 10. Subir Artefacto del Build del Frontend
        uses: actions/upload-pages-artifact@v2
        with:
          path: './frontend/dist'

  deploy-frontend-to-pages:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Desplegar en GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  deploy-backend-to-gke:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' # Solo desplegar en pushes a main
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 1. Checkout del Repositorio
        uses: actions/checkout@v3

      - name: 2. Autenticar con Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 3. Configurar gcloud
        run: gcloud auth configure-docker gcr.io

      - name: 4. Construir y Publicar Imágenes de Servicios Afectados
        run: |
          # Get changed services using Turborepo
          npx turbo run build --filter="...[HEAD^1]" --dry-run=json | jq -r ".tasks[].package" | while read -r service_name; do
            if [[ "$service_name" == "frontend" ]]; then
              continue # Frontend is handled separately
            fi
            echo "Building and pushing image for $service_name"
            docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/$service_name:latest -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/$service_name:${{ github.sha }} ./services/$service_name
            docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/$service_name:latest
            docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/$service_name:${{ github.sha }}
          done

      - name: 5. Obtener Credenciales de GKE
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}

      - name: 6. Desplegar en GKE
        run: |
          # Get changed services using Turborepo
          npx turbo run deploy --filter="...[HEAD^1]" --dry-run=json | jq -r ".tasks[].package" | while read -r service_name; do
            if [[ "$service_name" == "frontend" ]]; then
              continue # Frontend is handled separately
            fi
            echo "Deploying $service_name to GKE"
            # Update the image in the deployment manifest
            sed -i "s|gcr.io/YOUR_GCP_PROJECT_ID/$service_name:latest|gcr.io/${{ secrets.GCP_PROJECT_ID }}/$service_name:${{ github.sha }}|g" k8s/$service_name-deployment.yaml
            # Apply the manifest
            kubectl apply -f k8s/$service_name-deployment.yaml
          done
